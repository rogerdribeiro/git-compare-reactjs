{"ast":null,"code":"import _regeneratorRuntime from \"/home/rogerd/Curso Rockeseat/ReactJS/mod2/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/home/rogerd/Curso Rockeseat/ReactJS/mod2/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/rogerd/Curso Rockeseat/ReactJS/mod2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/rogerd/Curso Rockeseat/ReactJS/mod2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/rogerd/Curso Rockeseat/ReactJS/mod2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/rogerd/Curso Rockeseat/ReactJS/mod2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/rogerd/Curso Rockeseat/ReactJS/mod2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/rogerd/Curso Rockeseat/ReactJS/mod2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/rogerd/Curso Rockeseat/ReactJS/mod2/src/pages/Main/index.js\";\nimport React, { Component } from \"react\";\nimport api from \"../../services/api\";\nimport moment from \"moment\";\nimport { Container, Form } from \"./styles\";\nimport CompareList from \"../../components/CompareList\";\nimport logo from \"../../assets/logo.png\";\n\nvar Main =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Main, _Component);\n\n  function Main() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Main);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Main)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: false,\n      repositoryError: false,\n      repositoryInput: \"\",\n      repositories: []\n    };\n\n    _this.handleAddRepository =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var _this$state, repositoryInput, repositories, _ref2, repository, localRepositories;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n\n                _this.setState({\n                  loading: true\n                });\n\n                _this$state = _this.state, repositoryInput = _this$state.repositoryInput, repositories = _this$state.repositories;\n                _context.prev = 3;\n                _context.next = 6;\n                return api.get(\"/repos/\".concat(repositoryInput));\n\n              case 6:\n                _ref2 = _context.sent;\n                repository = _ref2.data;\n                repository.last_commit = moment(repository.pushed_at).fromNow();\n\n                _this.setState({\n                  repositoryError: false,\n                  repositoryInput: \"\",\n                  repositories: [].concat(_toConsumableArray(repositories), [repository])\n                });\n\n                _context.next = 12;\n                return _this.getLocalRepositories();\n\n              case 12:\n                localRepositories = _context.sent;\n                _context.next = 15;\n                return localStorage.setItem(\"@GitCompare:repositories\", JSON.stringify([].concat(_toConsumableArray(localRepositories), [repository])));\n\n              case 15:\n                _context.next = 20;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](3);\n\n                _this.setState({\n                  repositoryError: true\n                });\n\n              case 20:\n                _context.prev = 20;\n\n                _this.setState({\n                  loading: false\n                });\n\n                return _context.finish(20);\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 17, 20, 23]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.getLocalRepositories =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t1 = JSON;\n              _context2.next = 3;\n              return localStorage.getItem(\"@GitCompare:repositories\");\n\n            case 3:\n              _context2.t2 = _context2.sent;\n              _context2.t0 = _context2.t1.parse.call(_context2.t1, _context2.t2);\n\n              if (_context2.t0) {\n                _context2.next = 7;\n                break;\n              }\n\n              _context2.t0 = [];\n\n            case 7:\n              return _context2.abrupt(\"return\", _context2.t0);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    _this.updateRepository =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(id) {\n        var repositories, repository, _ref5, data;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                repositories = _this.state.repositories;\n                repository = repositories.find(function (repo) {\n                  return repo.id === id;\n                });\n                _context3.prev = 2;\n                _context3.next = 5;\n                return api.get(\"/repos/\".concat(repository.full_name));\n\n              case 5:\n                _ref5 = _context3.sent;\n                data = _ref5.data;\n                data.last_commit = moment(data.pushed_at).fromNow();\n\n                _this.setState({\n                  repositoryError: false,\n                  repositoryInput: \"\",\n                  repositories: repositories.map(function (repo) {\n                    return repo.id === data.id ? data : repo;\n                  })\n                });\n\n                _context3.next = 11;\n                return localStorage.setItem(\"@GitCompare:repositories\", JSON.stringify(repositories));\n\n              case 11:\n                _context3.next = 16;\n                break;\n\n              case 13:\n                _context3.prev = 13;\n                _context3.t0 = _context3[\"catch\"](2);\n\n                _this.setState({\n                  repositoryError: true\n                });\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 13]]);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.deleteRepository =\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(id) {\n        var repositories, updatedRepositories;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                repositories = _this.state.repositories;\n                updatedRepositories = repositories.filter(function (repository) {\n                  return repository.id !== id;\n                });\n\n                _this.setState({\n                  repositories: updatedRepositories\n                });\n\n                _context4.next = 5;\n                return localStorage.setItem(\"@GitCompare:repositories\", JSON.stringify(updatedRepositories));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x3) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(Main, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.setState({\n                  loading: true\n                });\n                _context5.t0 = this;\n                _context5.next = 4;\n                return this.getLocalRepositories();\n\n              case 4:\n                _context5.t1 = _context5.sent;\n                _context5.t2 = {\n                  loading: false,\n                  repositories: _context5.t1\n                };\n\n                _context5.t0.setState.call(_context5.t0, _context5.t2);\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          loading = _this$state2.loading,\n          repositories = _this$state2.repositories,\n          repositoryInput = _this$state2.repositoryInput,\n          repositoryError = _this$state2.repositoryError;\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        alt: \"Github compare\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(Form, {\n        withError: repositoryError,\n        onSubmit: this.handleAddRepository,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"usuario/repositorio\",\n        value: repositoryInput,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            repositoryInput: e.target.value,\n            repositoryError: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, loading ? React.createElement(\"i\", {\n        className: \"fa fa-spinner fa-pulse \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }) : \"OK\")), React.createElement(CompareList, {\n        repositories: repositories,\n        deleteRepository: this.deleteRepository,\n        updateRepository: this.updateRepository,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Main;\n}(Component);\n\nexport default Main;","map":{"version":3,"sources":["/home/rogerd/Curso Rockeseat/ReactJS/mod2/src/pages/Main/index.js"],"names":["React","Component","api","moment","Container","Form","CompareList","logo","Main","state","loading","repositoryError","repositoryInput","repositories","handleAddRepository","e","preventDefault","setState","get","repository","data","last_commit","pushed_at","fromNow","getLocalRepositories","localRepositories","localStorage","setItem","JSON","stringify","getItem","parse","updateRepository","id","find","repo","full_name","map","deleteRepository","updatedRepositories","filter","target","value"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,UAAhC;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;IAEMC,I;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE,KADH;AAENC,MAAAA,eAAe,EAAE,KAFX;AAGNC,MAAAA,eAAe,EAAE,EAHX;AAINC,MAAAA,YAAY,EAAE;AAJR,K;;UAgBRC,mB;;;;;+BAAsB,iBAAMC,CAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpBA,gBAAAA,CAAC,CAACC,cAAF;;AAEA,sBAAKC,QAAL,CAAc;AAAEP,kBAAAA,OAAO,EAAE;AAAX,iBAAd;;AAHoB,8BAKsB,MAAKD,KAL3B,EAKZG,eALY,eAKZA,eALY,EAKKC,YALL,eAKKA,YALL;AAAA;AAAA;AAAA,uBAQiBX,GAAG,CAACgB,GAAJ,kBAAkBN,eAAlB,EARjB;;AAAA;AAAA;AAQJO,gBAAAA,UARI,SAQVC,IARU;AAUlBD,gBAAAA,UAAU,CAACE,WAAX,GAAyBlB,MAAM,CAACgB,UAAU,CAACG,SAAZ,CAAN,CAA6BC,OAA7B,EAAzB;;AAEA,sBAAKN,QAAL,CAAc;AACZN,kBAAAA,eAAe,EAAE,KADL;AAEZC,kBAAAA,eAAe,EAAE,EAFL;AAGZC,kBAAAA,YAAY,+BAAMA,YAAN,IAAoBM,UAApB;AAHA,iBAAd;;AAZkB;AAAA,uBAkBc,MAAKK,oBAAL,EAlBd;;AAAA;AAkBZC,gBAAAA,iBAlBY;AAAA;AAAA,uBAoBZC,YAAY,CAACC,OAAb,CACJ,0BADI,EAEJC,IAAI,CAACC,SAAL,8BAAmBJ,iBAAnB,IAAsCN,UAAtC,GAFI,CApBY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAyBlB,sBAAKF,QAAL,CAAc;AAAEN,kBAAAA,eAAe,EAAE;AAAnB,iBAAd;;AAzBkB;AAAA;;AA2BlB,sBAAKM,QAAL,CAAc;AAAEP,kBAAAA,OAAO,EAAE;AAAX,iBAAd;;AA3BkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;UA+BtBc,oB;;;;6BAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,6BACrBI,IADqB;AAAA;AAAA,qBACJF,YAAY,CAACI,OAAb,CAAqB,0BAArB,CADI;;AAAA;AAAA;AAAA,0CAChBC,KADgB;;AAAA;AAAA;AAAA;AAAA;;AAAA,6BACiD,EADjD;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAGvBC,gB;;;;;+BAAmB,kBAAMC,EAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACTpB,gBAAAA,YADS,GACQ,MAAKJ,KADb,CACTI,YADS;AAGXM,gBAAAA,UAHW,GAGEN,YAAY,CAACqB,IAAb,CAAkB,UAAAC,IAAI;AAAA,yBAAIA,IAAI,CAACF,EAAL,KAAYA,EAAhB;AAAA,iBAAtB,CAHF;AAAA;AAAA;AAAA,uBAMQ/B,GAAG,CAACgB,GAAJ,kBAAkBC,UAAU,CAACiB,SAA7B,EANR;;AAAA;AAAA;AAMPhB,gBAAAA,IANO,SAMPA,IANO;AAQfA,gBAAAA,IAAI,CAACC,WAAL,GAAmBlB,MAAM,CAACiB,IAAI,CAACE,SAAN,CAAN,CAAuBC,OAAvB,EAAnB;;AAEA,sBAAKN,QAAL,CAAc;AACZN,kBAAAA,eAAe,EAAE,KADL;AAEZC,kBAAAA,eAAe,EAAE,EAFL;AAGZC,kBAAAA,YAAY,EAAEA,YAAY,CAACwB,GAAb,CAAiB,UAAAF,IAAI;AAAA,2BACjCA,IAAI,CAACF,EAAL,KAAYb,IAAI,CAACa,EAAjB,GAAsBb,IAAtB,GAA6Be,IADI;AAAA,mBAArB;AAHF,iBAAd;;AAVe;AAAA,uBAkBTT,YAAY,CAACC,OAAb,CACJ,0BADI,EAEJC,IAAI,CAACC,SAAL,CAAehB,YAAf,CAFI,CAlBS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAuBf,sBAAKI,QAAL,CAAc;AAAEN,kBAAAA,eAAe,EAAE;AAAnB,iBAAd;;AAvBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;UA2BnB2B,gB;;;;;+BAAmB,kBAAML,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACTpB,gBAAAA,YADS,GACQ,MAAKJ,KADb,CACTI,YADS;AAEX0B,gBAAAA,mBAFW,GAEW1B,YAAY,CAAC2B,MAAb,CAC1B,UAAArB,UAAU;AAAA,yBAAIA,UAAU,CAACc,EAAX,KAAkBA,EAAtB;AAAA,iBADgB,CAFX;;AAMjB,sBAAKhB,QAAL,CAAc;AAAEJ,kBAAAA,YAAY,EAAE0B;AAAhB,iBAAd;;AANiB;AAAA,uBAQXb,YAAY,CAACC,OAAb,CACJ,0BADI,EAEJC,IAAI,CAACC,SAAL,CAAeU,mBAAf,CAFI,CARW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;;;;;;;;AArEjB,qBAAKtB,QAAL,CAAc;AAAEP,kBAAAA,OAAO,EAAE;AAAX,iBAAd;+BAEA,I;;uBAEsB,KAAKc,oBAAL,E;;;;;AADpBd,kBAAAA,O,EAAS,K;AACTG,kBAAAA,Y;;;6BAFGI,Q;;;;;;;;;;;;;;;;6BAiFE;AAAA;;AAAA,yBAMH,KAAKR,KANF;AAAA,UAELC,OAFK,gBAELA,OAFK;AAAA,UAGLG,YAHK,gBAGLA,YAHK;AAAA,UAILD,eAJK,gBAILA,eAJK;AAAA,UAKLD,eALK,gBAKLA,eALK;AAQP,aACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,GAAG,EAAEJ,IAAV;AAAgB,QAAA,GAAG,EAAC,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAEI,eAAjB;AAAkC,QAAA,QAAQ,EAAE,KAAKG,mBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,WAAW,EAAC,qBAFd;AAGE,QAAA,KAAK,EAAEF,eAHT;AAIE,QAAA,QAAQ,EAAE,kBAAAG,CAAC;AAAA,iBACT,MAAI,CAACE,QAAL,CAAc;AACZL,YAAAA,eAAe,EAAEG,CAAC,CAAC0B,MAAF,CAASC,KADd;AAEZ/B,YAAAA,eAAe,EAAE;AAFL,WAAd,CADS;AAAA,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAYE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,OAAO,GAAG;AAAG,QAAA,SAAS,EAAC,yBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAA+C,IADzD,CAZF,CAFF,EAkBE,oBAAC,WAAD;AACE,QAAA,YAAY,EAAEG,YADhB;AAEE,QAAA,gBAAgB,EAAE,KAAKyB,gBAFzB;AAGE,QAAA,gBAAgB,EAAE,KAAKN,gBAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAlBF,CADF;AA0BD;;;;EA9HgB/B,S;;AAiInB,eAAeO,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport api from \"../../services/api\";\nimport moment from \"moment\";\nimport { Container, Form } from \"./styles\";\nimport CompareList from \"../../components/CompareList\";\nimport logo from \"../../assets/logo.png\";\n\nclass Main extends Component {\n  state = {\n    loading: false,\n    repositoryError: false,\n    repositoryInput: \"\",\n    repositories: []\n  };\n\n  async componentDidMount() {\n    this.setState({ loading: true });\n\n    this.setState({\n      loading: false,\n      repositories: await this.getLocalRepositories()\n    });\n  }\n\n  handleAddRepository = async e => {\n    e.preventDefault();\n\n    this.setState({ loading: true });\n\n    const { repositoryInput, repositories } = this.state;\n\n    try {\n      const { data: repository } = await api.get(`/repos/${repositoryInput}`);\n\n      repository.last_commit = moment(repository.pushed_at).fromNow();\n\n      this.setState({\n        repositoryError: false,\n        repositoryInput: \"\",\n        repositories: [...repositories, repository]\n      });\n\n      const localRepositories = await this.getLocalRepositories();\n\n      await localStorage.setItem(\n        \"@GitCompare:repositories\",\n        JSON.stringify([...localRepositories, repository])\n      );\n    } catch (err) {\n      this.setState({ repositoryError: true });\n    } finally {\n      this.setState({ loading: false });\n    }\n  };\n\n  getLocalRepositories = async () =>\n    JSON.parse(await localStorage.getItem(\"@GitCompare:repositories\")) || [];\n\n  updateRepository = async id => {\n    const { repositories } = this.state;\n\n    const repository = repositories.find(repo => repo.id === id);\n\n    try {\n      const { data } = await api.get(`/repos/${repository.full_name}`);\n\n      data.last_commit = moment(data.pushed_at).fromNow();\n\n      this.setState({\n        repositoryError: false,\n        repositoryInput: \"\",\n        repositories: repositories.map(repo =>\n          repo.id === data.id ? data : repo\n        )\n      });\n\n      await localStorage.setItem(\n        \"@GitCompare:repositories\",\n        JSON.stringify(repositories)\n      );\n    } catch (err) {\n      this.setState({ repositoryError: true });\n    }\n  };\n\n  deleteRepository = async id => {\n    const { repositories } = this.state;\n    const updatedRepositories = repositories.filter(\n      repository => repository.id !== id\n    );\n\n    this.setState({ repositories: updatedRepositories });\n\n    await localStorage.setItem(\n      \"@GitCompare:repositories\",\n      JSON.stringify(updatedRepositories)\n    );\n  };\n\n  render() {\n    const {\n      loading,\n      repositories,\n      repositoryInput,\n      repositoryError\n    } = this.state;\n\n    return (\n      <Container>\n        <img src={logo} alt=\"Github compare\" />\n        <Form withError={repositoryError} onSubmit={this.handleAddRepository}>\n          <input\n            type=\"text\"\n            placeholder=\"usuario/repositorio\"\n            value={repositoryInput}\n            onChange={e =>\n              this.setState({\n                repositoryInput: e.target.value,\n                repositoryError: false\n              })\n            }\n          />\n          <button type=\"submit\">\n            {loading ? <i className=\"fa fa-spinner fa-pulse \" /> : \"OK\"}\n          </button>\n        </Form>\n        <CompareList\n          repositories={repositories}\n          deleteRepository={this.deleteRepository}\n          updateRepository={this.updateRepository}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}